#include <stdio.h>

// 000000011111111112222222222333333333344444444445555555555
// 345678901234567890123456789012345678901234567890123456789

// 0000000111111111122222222223333333333444444444455555555556
// 3456789012345678901234567890123456789012345678901234567890

// 00000001111111111222222222233333333334444444444555555555561
// 34567890123456789012345678901234567890123456789012345678901


// 00000001111111111222222222233333333334444444444555555555566666666667777777777
// 34567890123456789012345678901234567890123456789012345678901234567890123456789

// 000000011111111112222222222333333333344444444445555555555666666666677777777778
// 345678901234567890123456789012345678901234567890123456789012345678901234567890

// 0000000111111111122222222223333333333444444444455555555556166666666777777777788
// 3456789012345678901234567890123456789012345678901234567890123456789012345678901


// 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
// 0000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999
// 3456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789

// 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
// 00000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990
// 34567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890

// 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011
// 000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900
// 345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901


// 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111
// 000000011111111112222222222333333333344444444445555555555666666666677777777778888888888999999999900000000001111111111
// 345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789

// 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111
// 0000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999000000000011111111112
// 3456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890

// 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111
// 00000001111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000111111111122
// 34567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901


namespace foo {
namespace
bar
{
    namespace bla::doo
    {
    int goo;

    class body1 {
      public:
        class inner {
            inner();
            ~inner();
        };
        body1(int a, int b);
    };


    }
}
}

using namespace foo
::
bar;

class culture;

class body2 {
  public:
    body2(int a, int b);
};


template<template<class> class T1, class T2>
void function(int a, int b, int c, int d, int e, int f,
              int g,
              int h,
              int i,
              int j, T1 k, T2 l)
{
    if (((a > b) || (b > c)) && (((c > d) && (d > e)) || (e > f)) &&
        (f > g) && (g > h)) {
        printf("This is a very long line of text.  This is supposed to trigger the long line penalty because I like high scores and long lines.\n");
    }

    /*
      if (true) {
      printf("commented out code\n");
      }
    */

    printf("if (a < h) {\n\
    /* call_function(); */\n\
}\n");

    int x = a + b + c + d +
            e + f + g + h;    

label0: label1:
    if (i > x) {  // if (none) {
        if (j > x) {
            if (k > x) {
                if (l > x) {
                    printf("deep nesting");
                    if (i == j) goto label1; else goto label2;
                }
                if (i == j) printf("bla");
            }
        }
    }

label2:

    goto
            lable3
            ;

label3
        :

    auto ch = '\x\
ff';

    printf(klasjdflkasjdflkasjdflkasjdflkjasdflkjasdlfkjasdflkjasdflkjasdlfkjsdflkjasdlfkjasdlfkjaslfkjasdlfkjaslfkj);

    {{
            {
                {
                    fool();
                }
            }}
    }

}


void f1()
{
    auto f3 = [q, z](int x, int y) {
        return x + y;
    };

    f2(a, b)[c](d);
}
